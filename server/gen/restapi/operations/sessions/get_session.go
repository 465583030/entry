// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSessionHandlerFunc turns a function with the right signature into a get session handler
type GetSessionHandlerFunc func(GetSessionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSessionHandlerFunc) Handle(params GetSessionParams) middleware.Responder {
	return fn(params)
}

// GetSessionHandler interface for that can handle valid get session params
type GetSessionHandler interface {
	Handle(GetSessionParams) middleware.Responder
}

// NewGetSession creates a new http.Handler for the get session operation
func NewGetSession(ctx *middleware.Context, handler GetSessionHandler) *GetSession {
	return &GetSession{Context: ctx, Handler: handler}
}

/*GetSession swagger:route GET /api/sessions/{session_id} sessions getSession

GetSession get session API

*/
type GetSession struct {
	Context *middleware.Context
	Handler GetSessionHandler
}

func (o *GetSession) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSessionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
