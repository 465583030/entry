// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigSso config sso
// swagger:model configSso
type ConfigSso struct {

	// client id
	// Required: true
	ClientID *string `json:"client_id"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// redirect uri
	// Required: true
	RedirectURI *string `json:"redirect_uri"`

	// scope
	// Required: true
	Scope *string `json:"scope"`
}

// Validate validates this config sso
func (m *ConfigSso) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedirectURI(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigSso) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("client_id", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *ConfigSso) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *ConfigSso) validateRedirectURI(formats strfmt.Registry) error {

	if err := validate.Required("redirect_uri", "body", m.RedirectURI); err != nil {
		return err
	}

	return nil
}

func (m *ConfigSso) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigSso) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigSso) UnmarshalBinary(b []byte) error {
	var res ConfigSso
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
